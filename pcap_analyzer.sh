#!/usr/bin/env bash
# A script to take a PCAP network capture file and try to extract useful
# information such as clear text, passwords, users, emails, CC data etc
# Ensure tcpdump,tshark,ngrep,tcpick are installed.
# written by Tyler Bennett
# add String SEDC
# output to a file as well as to the screen use tee -a for this give the option to output
# give option to output to a file or to the screen


#dir="$1"
###################################################
#if [ ! -d $dir  ]; then
#printf "Usage: `basename $0` location of pcaps \n "
#echo "Searches a pcap file for useful information"
#exit 0
#fi
#########################################
# Search Criteria
########################################

show_hosts() {
# show hosts of IP traffic
echo "Show hosts for $files"
echo "=========="
tshark -r $files -q -z hosts,ipv4
read -p "Next pcap..."
}

show_hierarcy() {
# Show Hierarcy stats using tshark (-z option is for listing stats)
echo "Show hierarchy for $files"
echo "=============="
tshark -r $files -q -z io,phs
read -p "Next pcap..."
}

show_all_traffic_dst_ports() {
# Show all traffic and dest port info
echo "Show all sessions and destination ports for $files"
echo "======================================="
tshark -o gui.column.format:'"Source", "%s", "Destination", "%d", "dstport", "%uD"' -r $files |sort|uniq
read -p "Next pcap..."
}

show_top_talkers() {
# List the top talkers, and sort by number of bytes sent by each
echo "Top Talkers For All Traffic for $files"
echo "============================="
echo
echo -e '# of Pkts \t IP Addr'
echo -e '========= \t ======='
tcpdump -tnr $files |awk -F '.' '{print $1"."$2"."$3"."$4}' | sort | uniq -c | sort -n | tail
read -p "Next pcap..."
}

show_all_convos() {
# Show all conversations and port detail using tshark filters"
echo "Show all conversation for $files"
echo "====================="
tshark -o gui.column.format:'"Source", "%s", "Destination", "%d", "dstport", "%uD"' -r $files |sort|uniq
read -p "Next pcap..."
}

show_tcp_streams() {
# Show all TCP streams
echo "Show TCP Streams for $files"
echo "================"
tshark -r $files -q -z conv,tcp
read -p "Next pcap..."
}

search_user_str() {
# Search for any word with user
echo "Show any packets with "User" in it for $files"
echo "================================="
ngrep -q -W byline -I $files|grep -i user
read -p "Next pcap..."
}

search_pass_str() {
# Search for any word with pass
echo "Show any words with "Pass" in it for $files"
echo "================================"
ngrep -q -W byline -I $files|grep -i pass
read -p "Next pcap..."
}

search_for_emails() {
# Search for emails
echo "Find anything looking like an email address for $files"
echo "==========================================="
ngrep -q -W byline -I $files '[a-zA-Z0-9.]+\.?@[a-zA-Z0-9.]+\.[a-zA-Z0-9]+' |grep -Eo '[a-zA-Z0-9.]+\.?@[a-zA-Z0-9.]+\.[a-zA-Z0-9]+'|sort|uniq
read -p "Next pcap..."
}

search_for_ldaps() {
echo "Find any ldap connections or any possible passwords for $files"
echo "==========================================="
ngrep -q -W byline -I $files port 389
read -p "Next pcap..."
}

search_for_sedc() {
echo "Find any SEDC information for $files"
echo "==========================================="
ngrep -q -W byline -I $files port 8205 |egrep -i "SEDC|LEETECH|Bank Account"
read -p "Next pcap..."
}

packet_data_25() {
# Look at TCP data in printable form
echo "Show Port 25 data for $files"
echo "================="
tcpick -r $files -yP "port 25"
read -p "Next pcap..."
}

packet_data_21() {
echo "Show Port 21 data for $files"
echo "================="
tcpick -r $files -yP "port 21"
read -p "Next pcap..."
}

packet_data_23() {
echo "Show Port 23 data for $files"
echo "================="
tcpick -r $files -yP "port 23"
read -p "Next pcap..."
}

packet_data_80() {
echo "Show Port 80 data for $files"
echo "================="
tcpick -r $files -yP "port 80"
read -p "Next pcap..."
}

show_tcp_flows() {
for files in $(find $dir -type f -iname "*.pcap"); do
	echo "Show all TCP flows for $files";
	echo "==================";
	tcpick -r $files -C;
	read -p "Next pcap...";
done
}

main() {
  while getopts ":d:tcpflows:" opt; do
   case $opt in
   tcpflows)
      show_tcp_flows;;
   d)
      dir=$OPTARG;;
  esac
  done

  if [ ! -d $dir  ]; then
	printf "Usage: `basename $0` location of pcaps \n "
	echo "Searches a pcap file for useful information"
	exit 0
  fi
  shift $(( OPTIND - 1 ));
}

main
